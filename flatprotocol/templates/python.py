# -*- coding: utf-8 -*-

__author__ = 'Wang Chao'
__date__ = '14-11-25'

import datetime

from flatprotocol.fields import BaseField


TEMPLATE = """
# -*- coding: utf-8 -*-
# Generated by Flatprotocol
# Generated Date: {date}

class {class_name}(object):
    PROTOCOL_ID = {protocol_id}

    def __init__(self):
{fields}

    def Parse(self, data):
        pass

    def Serialize(self):
        pass
"""

FILE_NAME_EXTENSION = ".py"


def generate(cls):
    """

    :type cls: flatprotocol.Protocol
    """
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    class_name = cls.__name__
    protocol_id = cls.Meta.protocol_id

    fields = []
    for p in dir(cls):
        field = getattr(cls, p)
        if isinstance(field, BaseField):
            if field.options['optional']:
                value = field.options['default']
            else:
                value = None
            fields.append("        self.{0} = {1}".format(p, value))

    fields = '\n'.join(fields)

    result = TEMPLATE.format(
        date=now,
        class_name=class_name,
        protocol_id=protocol_id,
        fields=fields
    )

    return result

