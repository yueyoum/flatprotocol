# -*- coding: utf-8 -*-

__author__ = 'Wang Chao'
__date__ = '14-11-25'

import datetime

from flatprotocol import *


TEMPLATE = """
# -*- coding: utf-8 -*-
# Generated by Flatprotocol
# Generated Date: {date}

{classes}

"""

CLASS_TEMPLATE = """
class {class_name}(object):
    PROTOCOL_ID = {protocol_id}

    def __init__(self):
{fields}

    def Parse(self, data):
        pass

    def Serialize(self):
        pass


"""

FILE_NAME_EXTENSION = ".py"


def get_default_value(field):
    if isinstance(field, IntegerField):
        return 0
    if isinstance(field, FloatField):
        return 0
    if isinstance(field, BinaryField):
        return '""'
    if isinstance(field, StringField):
        return '""'
    if isinstance(field, Vector2Field):
        return (0, 0)
    if isinstance(field, Vector3Field):
        return (0,0,0)
    if isinstance(field, ListField):
        return []

def generate(spec):
    """

    :type spec: flatprotocol.Specification
    """
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    clses = [generate_one(cls) for cls in spec.protocols]
    clses = '\n'.join(clses)

    return TEMPLATE.format(date=now, classes=clses)






def generate_one(cls):
    """

    :type cls: flatprotocol.Protocol
    """

    class_name = cls.__name__
    protocol_id = cls.protocol_id

    fields = []
    for f in cls.fields:
        fields.append("        self.{0} = {1}".format(f.name, get_default_value(f)))

    fields = '\n'.join(fields)

    result = CLASS_TEMPLATE.format(
        class_name=class_name,
        protocol_id=protocol_id,
        fields=fields
    )

    return result
